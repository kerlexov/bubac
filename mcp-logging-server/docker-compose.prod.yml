version: '3.8'

services:
  mcp-logging-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-logging-server
    restart: unless-stopped
    environment:
      - MCP_LOGGING_DB_CONNECTION=/app/data/logs.db
      - MCP_LOGGING_CONFIG_PATH=/app/config/config.yaml
      - MCP_LOGGING_RECOVERY_DIR=/app/recovery
      # Security settings
      - API_KEY_REQUIRED=true
      - API_KEYS_CONFIG_PATH=/app/config/api-keys.yaml
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS_PER_MINUTE=1000
      - RATE_LIMIT_BURST=100
      - TLS_ENABLED=false  # TLS handled by Traefik
      - MASK_SENSITIVE_FIELDS=true
      - SENSITIVE_FIELDS=password,token,secret,key,authorization
    volumes:
      - ./data:/app/data
      - ./config:/app/config:ro
      - ./recovery:/app/recovery
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-logging-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    labels:
      - "traefik.enable=true"
      # Log ingestion API
      - "traefik.http.routers.mcp-logging-api.rule=Host(`${API_DOMAIN}`) && PathPrefix(`/v1/`, `/health`, `/metrics`)"
      - "traefik.http.routers.mcp-logging-api.entrypoints=websecure"
      - "traefik.http.routers.mcp-logging-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-logging-api.service=mcp-logging-api"
      - "traefik.http.services.mcp-logging-api.loadbalancer.server.port=9080"
      # MCP server
      - "traefik.http.routers.mcp-logging-mcp.rule=Host(`${MCP_DOMAIN}`) && PathPrefix(`/mcp`)"
      - "traefik.http.routers.mcp-logging-mcp.entrypoints=websecure"
      - "traefik.http.routers.mcp-logging-mcp.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-logging-mcp.service=mcp-logging-mcp"
      - "traefik.http.services.mcp-logging-mcp.loadbalancer.server.port=8081"
      # Security headers
      - "traefik.http.middlewares.security-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.X-XSS-Protection=1; mode=block"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.Strict-Transport-Security=max-age=31536000; includeSubDomains"
      - "traefik.http.middlewares.security-headers.headers.customresponseheaders.Content-Security-Policy=default-src 'self'"
      - "traefik.http.routers.mcp-logging-api.middlewares=security-headers"
      - "traefik.http.routers.mcp-logging-mcp.middlewares=security-headers"

  traefik:
    image: traefik:v2.10
    container_name: mcp-logging-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=false"  # Disable dashboard in production
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=WARN"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--log.filepath=/var/log/traefik/traefik.log"
      # Security settings
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/letsencrypt:/letsencrypt
      - ./traefik/logs:/var/log/traefik
    networks:
      - mcp-logging-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Database for high-availability setups
  postgres:
    image: postgres:15-alpine
    container_name: mcp-logging-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mcp_logs}
      POSTGRES_USER: ${POSTGRES_USER:-logger}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - mcp-logging-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-logger} -d ${POSTGRES_DB:-mcp_logs}"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Only expose postgres port in development
    # ports:
    #   - "5432:5432"

networks:
  mcp-logging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  traefik_letsencrypt:
    driver: local